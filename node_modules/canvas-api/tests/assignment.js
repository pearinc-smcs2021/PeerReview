const test = require('tape');
const dateFormat = require('dateformat');
const assignment = require('../lib/assignment');
var nock = require('nock');
const config = require('../config');

// Dummy data used for Mocks
let source = 1;
let destination = 2;
let id = 3;
let courseid = 4;
let assignmentid = 5;
let nameresponse = 'Canvas API - Test Suite Assignment';
let res;

// Mock http calls

res = nock('https://'+config.domain+'/api/'+config.apiVersion)
  .post('/courses/'+courseid+'/assignments')
  .reply(200, { id: id });


  res = nock('https://'+config.domain+'/api/'+config.apiVersion)
  .put('/courses/'+courseid+'/assignments/'+assignmentid)
  .reply(200, { name: nameresponse});


  res = nock('https://'+config.domain+'/api/'+config.apiVersion)
  .get('/courses/'+courseid+'/assignments/'+assignmentid)
  .reply(200, { name: nameresponse});


  res = nock('https://'+config.domain+'/api/'+config.apiVersion)
  .intercept('/courses/'+courseid+'/assignments/'+assignmentid,'DELETE')
  .reply(200, { id: id });



let now = new Date();
let createParams = {
  assignment: {
    name: 'Canvas API - Test Suite Assignment',
    integration_id: 'EXAMPLE_ID_123',
    submission_types: 'online_text_entry',
    points_possible: 100,
    grading_type: 'points',
    due_at: dateFormat(now.setDate(now.getDate() + 7), 'isoUtcDateTime'),
    lock_at: dateFormat(now, 'isoUtcDateTime'),
    unlock_at: dateFormat(now.setDate(now.getDate() + 1), 'isoUtcDateTime'),
    description: '<p>This is an example assignment generated by the <strong>canvas-api</strong> module, which has now been edited.</p><p>For more information, please visit: <a href="https://www.npmjs.com/package/canvas-api"target="_blank">https://www.npmjs.com/package/canvas-api</a></p>',
    muted: true,
    published: false
  }
};
let editParams = {
  assignment: {
    name: 'Canvas API - Test Suite Assignment (Edited)',
    description: 'This is an example assignment generated by the canvas-api module, which has now been edited.'
  }
};

test('Assignment - Create', (t) => {
  t.plan(1);
  assignment.create(courseid, createParams, (error, results) => {
    if (error) {
      t.fail(error.statusCode);
    } else {
      id = results.body.id;
      t.ok(typeof results.body.id, 'number');
    }
  });
});

test('Assignment - Edit', (t) => {
  t.plan(1);
  assignment.edit(courseid, assignmentid, editParams, (error, results) => {
    if (error) {
      t.fail(error.statusCode);
    } else {
      t.ok(results.body.name, editParams.assignment.name);
    }
  });
});

test('Assignment - Get', (t) => {
  t.plan(1);
  assignment.get(courseid, assignmentid, (error, results) => {
    if (error) {
      t.fail(error.statusCode);
    } else {
      t.ok(results.body.name, editParams.assignment.name);
    }
  });
});

test('Assignment - Delete', (t) => {
  t.plan(1);
  assignment.delete(courseid, assignmentid, (error, results) => {
    if (error) {
      t.fail(error.statusCode);
    } else {
      t.ok(typeof results.body.id, id);
    }
  });
});
