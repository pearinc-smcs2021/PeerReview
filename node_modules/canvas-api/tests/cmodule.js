const test = require('tape');
const dateFormat = require('dateformat');
const cmodule = require('../lib/module');
var nock = require('nock');
const config = require('../config');

// Dummy data used for Mocks
let source = 1;
let destination = 2;
let id = 3;
let courseid = 4;
let cmoduleid = 5;
let nameresponse = 'Canvas API - Test Suite Assignment';
let res;

// Mock http calls

res = nock('https://'+config.domain+'/api/'+config.apiVersion)
  .post('/courses/'+courseid+'/modules')
  .reply(200, { id: id });


  res = nock('https://'+config.domain+'/api/'+config.apiVersion)
  .put('/courses/'+courseid+'/modules/'+cmoduleid)
  .reply(200, { name: nameresponse});


  res = nock('https://'+config.domain+'/api/'+config.apiVersion)
  .get('/courses/'+courseid+'/modules/'+cmoduleid)
  .reply(200, { name: nameresponse});


  res = nock('https://'+config.domain+'/api/'+config.apiVersion)
  .intercept('/courses/'+courseid+'/modules/'+cmoduleid,'DELETE')
  .reply(200, { id: id });



let now = new Date();
let createParams = {
  module: {
    name: 'Canvas API - Test Suite Module',
  }
};
let editParams = {
  module: {
    name: 'Canvas API - Test Suite Module (Edited)',
    description: 'This is an example module generated by the canvas-api , which has now been edited.'
  }
};

test('Assignment - Create', (t) => {
  t.plan(1);
  cmodule.create(courseid, createParams, (error, results) => {
    if (error) {
      t.fail(error.statusCode);
    } else {
      id = results.body.id;
      t.ok(typeof results.body.id, 'number');
    }
  });
});

test('Assignment - Edit', (t) => {
  t.plan(1);
  cmodule.edit(courseid, cmoduleid, editParams, (error, results) => {
    if (error) {
      t.fail(error.statusCode);
    } else {
      t.ok(results.body.name, editParams.module.name);
    }
  });
});

test('Assignment - Get', (t) => {
  t.plan(1);
  cmodule.get(courseid, cmoduleid, (error, results) => {
    if (error) {
      t.fail(error.statusCode);
    } else {
      t.ok(results.body.name, editParams.module.name);
    }
  });
});

test('Assignment - Delete', (t) => {
  t.plan(1);
  cmodule.delete(courseid, cmoduleid, (error, results) => {
    if (error) {
      t.fail(error.statusCode);
    } else {
      t.ok(typeof results.body.id, id);
    }
  });
});
